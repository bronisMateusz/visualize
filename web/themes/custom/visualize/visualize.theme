<?php

use Drupal\Core\Site\Settings;

/**
 * Implements hook_library_info_alter().
 */
function visualize_library_info_alter(&$libraries, $extension) {
  if ($extension !== 'visualize') {
    return;
  }

  $local = Settings::get('hot_module_replacement');

  // Replace library paths so they are ready for either Dev or Prd.
  foreach ($libraries as $library => $settings) {
    if (isset($settings['css'])) {
      foreach ($settings['css'] as $type => $paths) {
        foreach ($paths as $path => $options) {
          _vite_replace_library($libraries[$library]['css'][$type], $path, $options);
        }
      }
    }

    if (isset($settings['js'])) {
      foreach ($settings['js'] as $path => $options) {
        _vite_replace_library($libraries[$library]['js'], $path, $options);
      }
    }
  }

  // Exit if local development. Everything after will be for production.
  if ($local) {
    return;
  }

  // Remove the HMR client library.
  unset($libraries['hot-module-replacement']);

  // Read the production Manifest file to find CSS files imported via JS files.
  $manifest_file = file_get_contents(__DIR__  . '/dist/manifest.json');
  $manifest = json_decode($manifest_file);

  foreach ($manifest as $key => $data) {
    // Ignore files that will be imported via js.
    if (preg_match('/^_/', $key)) {
      continue;
    }

    if (!empty($data->css)) {
      foreach ($data->css as $css_file) {
        // Search through each library.
        foreach ($libraries as $library => $settings) {
          foreach ($settings['js'] as $path => $options) {
            $js_path = 'dist/' . $data->file;
            if ($path == $js_path) {
              $libraries[$library]['css']['component']["dist/${css_file}"] = [];
            }
          }
        }
      }
    }
  }
}

/**
 * Replace an asset path with one that works with Vite.
 *
 * @param array $library
 *   The library to be altered.
 * @param string $path
 *   The file path and name.
 * @param array $options
 *   Any settings that were part of the original file's settings.
 */
function _vite_replace_library(array &$library, string $path, array $options): void {
  // Ignore external paths
  if (preg_match('/^(http|:\/\/)/', $path)) {
    return;
  }

  $local = Settings::get('hot_module_replacement');
  $dir = 'dist';

  // Remove the old library info.
  unset($library[$path]);

  if ($local) {
    $dir = 'http://localhost:12320';
    $options['type'] = 'external';
    if (preg_match('/.m?js$/', $path)) {
      $options['crossorigin'] = TRUE;
    }
  } else {
    // Convert .scss files to .css
    $path = preg_replace('/.s[ac]ss$/', '.css', $path);
    // Strip off all but the filename.
    $path = basename($path);
  }

  // Prepend the local development url.
  $path = "${dir}/${path}";
  // Add in the new altered library.
  $library[$path] = $options;
}

/**
 * Implements hook_preprocess_html().
 */
function visualize_preprocess_html(&$variables) {
  $variables['#attached']['drupalSettings']['path']['themeUrl'] = \Drupal::theme()->getActiveTheme()->getPath();

  $main_menu_storage = \Drupal::entityTypeManager()
    ->getStorage('menu_link_content')
    ->loadByProperties(['menu_name' => 'main']);

  $menu_titles = [];
  $menu_links = [];

  foreach ($main_menu_storage as $menu_item) {
    $menu_item_title = $menu_item->getTitle();
    array_push($menu_titles, $menu_item_title);


    $menu_item_link = str_replace('#', '', $menu_item->getUrlObject()->toString());
    array_push($menu_links, $menu_item_link);
  }

  $variables['#attached']['drupalSettings']['menuTitles'] = $menu_titles;
  $variables['#attached']['drupalSettings']['menuLinks'] = $menu_links;
}

/**
 * Implements template_preprocess_media().
 */
function visualize_preprocess_media(array &$variables) {
  $view_mode = $variables['view_mode'];
  $field = array_key_first($variables['content']);

  if ($view_mode === 'media_background' && $field === 'field_media_video_file_file') {
    $video_file = $variables['content']['field_media_video_file_file'];
    $attributes = $video_file[0]['#attributes'];

    //update background video attributes
    unset($attributes['controls']);
    $attributes['autoplay'] = 'autoplay';
    $attributes['loop'] = 'loop';
    $attributes['muted'] = 'muted';
  }
}
